package org.eclipse.emf.emfatic.core.lang.gen.ast;

/**
 * A Visitor pattern stub implementation for language Emfatic.
 *
 * @generated by Gymnast from Emfatic.ast on 06.02.2007 17:57:34
 */
public class EmfaticASTNodeVisitor {

	/**
	 * The external entry point used to perform a visit beginning at the given node.
	 * 
	 * @param node the EmfaticASTNode to visit
	 */
	public final void visit(EmfaticASTNode node) {
		node.accept(this);
	}

	/**
	 * Called just before <code>beginVisit</code> for each node being visited.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the EmfaticASTNode currently being visited
	 */
	public void preVisit(EmfaticASTNode node) {
	}

	/**
	 * Called just after <code>endVisit</code> for each node being visited.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the EmfaticASTNode currently being visited
	 */
	public void postVisit(EmfaticASTNode node) {
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the generic one called for node types that
	 * don't provide a specific overloaded form of <code>beginVisit</code>.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the EmfaticASTNode currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EmfaticASTNode node) {
		return true;
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the generic one called for node types that
	 * don't provide a specific overloaded form of <code>endVisit</code>.
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param node the EmfaticASTNode currently being visited
	 */
	public void endVisit(EmfaticASTNode node) {
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EmfaticTokenNode</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tokenNode the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EmfaticTokenNode tokenNode) {
		return beginVisit((EmfaticASTNode)tokenNode);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EmfaticTokenNode</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param tokenNode the node currently being visited
	 */
	public void endVisit(EmfaticTokenNode tokenNode) {
		endVisit((EmfaticASTNode)tokenNode);
	}

	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param compUnit the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CompUnit compUnit) {
		return beginVisit((EmfaticASTNode)compUnit);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CompUnit</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param compUnit the node currently being visited
	 */
	public void endVisit(CompUnit compUnit) {
		endVisit((EmfaticASTNode)compUnit);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>PackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param packageDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(PackageDecl packageDecl) {
		return beginVisit((EmfaticASTNode)packageDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>PackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param packageDecl the node currently being visited
	 */
	public void endVisit(PackageDecl packageDecl) {
		endVisit((EmfaticASTNode)packageDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QualifiedID qualifiedID) {
		return beginVisit((EmfaticASTNode)qualifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedID the node currently being visited
	 */
	public void endVisit(QualifiedID qualifiedID) {
		endVisit((EmfaticASTNode)qualifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QidSeparator</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qidSeparator the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QidSeparator qidSeparator) {
		return beginVisit((EmfaticTokenNode)qidSeparator);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QidSeparator</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qidSeparator the node currently being visited
	 */
	public void endVisit(QidSeparator qidSeparator) {
		endVisit((EmfaticTokenNode)qidSeparator);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralOrQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralOrQualifiedID the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(StringLiteralOrQualifiedID stringLiteralOrQualifiedID) {
		return beginVisit((EmfaticASTNode)stringLiteralOrQualifiedID);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralOrQualifiedID</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralOrQualifiedID the node currently being visited
	 */
	public void endVisit(StringLiteralOrQualifiedID stringLiteralOrQualifiedID) {
		endVisit((EmfaticASTNode)stringLiteralOrQualifiedID);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralContainer the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(StringLiteralContainer stringLiteralContainer) {
		return beginVisit((StringLiteralOrQualifiedID)stringLiteralContainer);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>StringLiteralContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringLiteralContainer the node currently being visited
	 */
	public void endVisit(StringLiteralContainer stringLiteralContainer) {
		endVisit((StringLiteralOrQualifiedID)stringLiteralContainer);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedIDContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedIDContainer the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(QualifiedIDContainer qualifiedIDContainer) {
		return beginVisit((StringLiteralOrQualifiedID)qualifiedIDContainer);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>QualifiedIDContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param qualifiedIDContainer the node currently being visited
	 */
	public void endVisit(QualifiedIDContainer qualifiedIDContainer) {
		endVisit((StringLiteralOrQualifiedID)qualifiedIDContainer);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Annotations</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotations the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Annotations annotations) {
		return beginVisit((EmfaticASTNode)annotations);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Annotations</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotations the node currently being visited
	 */
	public void endVisit(Annotations annotations) {
		endVisit((EmfaticASTNode)annotations);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Annotation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotation the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Annotation annotation) {
		return beginVisit((EmfaticASTNode)annotation);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Annotation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param annotation the node currently being visited
	 */
	public void endVisit(Annotation annotation) {
		endVisit((EmfaticASTNode)annotation);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>KeyEqualsValueList</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param keyEqualsValueList the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(KeyEqualsValueList keyEqualsValueList) {
		return beginVisit((EmfaticASTNode)keyEqualsValueList);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>KeyEqualsValueList</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param keyEqualsValueList the node currently being visited
	 */
	public void endVisit(KeyEqualsValueList keyEqualsValueList) {
		endVisit((EmfaticASTNode)keyEqualsValueList);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>KeyEqualsValue</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param keyEqualsValue the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(KeyEqualsValue keyEqualsValue) {
		return beginVisit((EmfaticASTNode)keyEqualsValue);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>KeyEqualsValue</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param keyEqualsValue the node currently being visited
	 */
	public void endVisit(KeyEqualsValue keyEqualsValue) {
		endVisit((EmfaticASTNode)keyEqualsValue);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmts the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ImportStmts importStmts) {
		return beginVisit((EmfaticASTNode)importStmts);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmts</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmts the node currently being visited
	 */
	public void endVisit(ImportStmts importStmts) {
		endVisit((EmfaticASTNode)importStmts);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmt the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ImportStmt importStmt) {
		return beginVisit((EmfaticASTNode)importStmt);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ImportStmt</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param importStmt the node currently being visited
	 */
	public void endVisit(ImportStmt importStmt) {
		endVisit((EmfaticASTNode)importStmt);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecls the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TopLevelDecls topLevelDecls) {
		return beginVisit((EmfaticASTNode)topLevelDecls);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecls the node currently being visited
	 */
	public void endVisit(TopLevelDecls topLevelDecls) {
		endVisit((EmfaticASTNode)topLevelDecls);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TopLevelDecl topLevelDecl) {
		return beginVisit((EmfaticASTNode)topLevelDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TopLevelDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param topLevelDecl the node currently being visited
	 */
	public void endVisit(TopLevelDecl topLevelDecl) {
		endVisit((EmfaticASTNode)topLevelDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SubPackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param subPackageDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SubPackageDecl subPackageDecl) {
		return beginVisit((TopLevelDecl)subPackageDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SubPackageDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param subPackageDecl the node currently being visited
	 */
	public void endVisit(SubPackageDecl subPackageDecl) {
		endVisit((TopLevelDecl)subPackageDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassDecl classDecl) {
		return beginVisit((TopLevelDecl)classDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classDecl the node currently being visited
	 */
	public void endVisit(ClassDecl classDecl) {
		endVisit((TopLevelDecl)classDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CommaListBoundExceptWild</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param commaListBoundExceptWild the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CommaListBoundExceptWild commaListBoundExceptWild) {
		return beginVisit((EmfaticASTNode)commaListBoundExceptWild);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CommaListBoundExceptWild</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param commaListBoundExceptWild the node currently being visited
	 */
	public void endVisit(CommaListBoundExceptWild commaListBoundExceptWild) {
		endVisit((EmfaticASTNode)commaListBoundExceptWild);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>AbstractModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param abstractModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(AbstractModifier abstractModifier) {
		return beginVisit((EmfaticASTNode)abstractModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>AbstractModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param abstractModifier the node currently being visited
	 */
	public void endVisit(AbstractModifier abstractModifier) {
		endVisit((EmfaticASTNode)abstractModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classKind the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassKind classKind) {
		return beginVisit((EmfaticTokenNode)classKind);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classKind the node currently being visited
	 */
	public void endVisit(ClassKind classKind) {
		endVisit((EmfaticTokenNode)classKind);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeParamsInfo</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeParamsInfo the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeParamsInfo typeParamsInfo) {
		return beginVisit((EmfaticASTNode)typeParamsInfo);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeParamsInfo</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeParamsInfo the node currently being visited
	 */
	public void endVisit(TypeParamsInfo typeParamsInfo) {
		endVisit((EmfaticASTNode)typeParamsInfo);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeParams</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeParams the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OneOrMoreTypeParams oneOrMoreTypeParams) {
		return beginVisit((EmfaticASTNode)oneOrMoreTypeParams);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeParams</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeParams the node currently being visited
	 */
	public void endVisit(OneOrMoreTypeParams oneOrMoreTypeParams) {
		endVisit((EmfaticASTNode)oneOrMoreTypeParams);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeParam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeParam the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeParam typeParam) {
		return beginVisit((EmfaticASTNode)typeParam);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeParam</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeParam the node currently being visited
	 */
	public void endVisit(TypeParam typeParam) {
		endVisit((EmfaticASTNode)typeParam);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeBoundsInfo</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeBoundsInfo the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeBoundsInfo typeBoundsInfo) {
		return beginVisit((EmfaticASTNode)typeBoundsInfo);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeBoundsInfo</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeBoundsInfo the node currently being visited
	 */
	public void endVisit(TypeBoundsInfo typeBoundsInfo) {
		endVisit((EmfaticASTNode)typeBoundsInfo);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeParamBounds</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeParamBounds the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OneOrMoreTypeParamBounds oneOrMoreTypeParamBounds) {
		return beginVisit((EmfaticASTNode)oneOrMoreTypeParamBounds);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeParamBounds</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeParamBounds the node currently being visited
	 */
	public void endVisit(OneOrMoreTypeParamBounds oneOrMoreTypeParamBounds) {
		endVisit((EmfaticASTNode)oneOrMoreTypeParamBounds);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>BoundExceptWildcard</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param boundExceptWildcard the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(BoundExceptWildcard boundExceptWildcard) {
		return beginVisit((TypeArg)boundExceptWildcard);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>BoundExceptWildcard</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param boundExceptWildcard the node currently being visited
	 */
	public void endVisit(BoundExceptWildcard boundExceptWildcard) {
		endVisit((TypeArg)boundExceptWildcard);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeArgs</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeArgs the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OneOrMoreTypeArgs oneOrMoreTypeArgs) {
		return beginVisit((EmfaticASTNode)oneOrMoreTypeArgs);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OneOrMoreTypeArgs</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param oneOrMoreTypeArgs the node currently being visited
	 */
	public void endVisit(OneOrMoreTypeArgs oneOrMoreTypeArgs) {
		endVisit((EmfaticASTNode)oneOrMoreTypeArgs);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeArg</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeArg the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeArg typeArg) {
		return beginVisit((EmfaticASTNode)typeArg);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeArg</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeArg the node currently being visited
	 */
	public void endVisit(TypeArg typeArg) {
		endVisit((EmfaticASTNode)typeArg);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Wildcard</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param wildcard the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Wildcard wildcard) {
		return beginVisit((TypeArg)wildcard);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Wildcard</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param wildcard the node currently being visited
	 */
	public void endVisit(Wildcard wildcard) {
		endVisit((TypeArg)wildcard);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ExtendsOrSuper</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param extendsOrSuper the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ExtendsOrSuper extendsOrSuper) {
		return beginVisit((EmfaticTokenNode)extendsOrSuper);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ExtendsOrSuper</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param extendsOrSuper the node currently being visited
	 */
	public void endVisit(ExtendsOrSuper extendsOrSuper) {
		endVisit((EmfaticTokenNode)extendsOrSuper);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecls the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassMemberDecls classMemberDecls) {
		return beginVisit((EmfaticASTNode)classMemberDecls);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecls</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecls the node currently being visited
	 */
	public void endVisit(ClassMemberDecls classMemberDecls) {
		endVisit((EmfaticASTNode)classMemberDecls);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ClassMemberDecl classMemberDecl) {
		return beginVisit((EmfaticASTNode)classMemberDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ClassMemberDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param classMemberDecl the node currently being visited
	 */
	public void endVisit(ClassMemberDecl classMemberDecl) {
		endVisit((EmfaticASTNode)classMemberDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Attribute</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param attribute the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Attribute attribute) {
		return beginVisit((ClassMemberDecl)attribute);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Attribute</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param attribute the node currently being visited
	 */
	public void endVisit(Attribute attribute) {
		endVisit((ClassMemberDecl)attribute);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TypeWithMulti</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeWithMulti the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TypeWithMulti typeWithMulti) {
		return beginVisit((ResultType)typeWithMulti);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TypeWithMulti</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param typeWithMulti the node currently being visited
	 */
	public void endVisit(TypeWithMulti typeWithMulti) {
		endVisit((ResultType)typeWithMulti);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Multiplicity</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicity the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Multiplicity multiplicity) {
		return beginVisit((EmfaticASTNode)multiplicity);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Multiplicity</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicity the node currently being visited
	 */
	public void endVisit(Multiplicity multiplicity) {
		endVisit((EmfaticASTNode)multiplicity);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicityExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(MultiplicityExpr multiplicityExpr) {
		return beginVisit((EmfaticASTNode)multiplicityExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>MultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param multiplicityExpr the node currently being visited
	 */
	public void endVisit(MultiplicityExpr multiplicityExpr) {
		endVisit((EmfaticASTNode)multiplicityExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>SimpleMultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param simpleMultiplicityExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(SimpleMultiplicityExpr simpleMultiplicityExpr) {
		return beginVisit((EmfaticTokenNode)simpleMultiplicityExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>SimpleMultiplicityExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param simpleMultiplicityExpr the node currently being visited
	 */
	public void endVisit(SimpleMultiplicityExpr simpleMultiplicityExpr) {
		endVisit((EmfaticTokenNode)simpleMultiplicityExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Reference</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param reference the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Reference reference) {
		return beginVisit((ClassMemberDecl)reference);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Reference</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param reference the node currently being visited
	 */
	public void endVisit(Reference reference) {
		endVisit((ClassMemberDecl)reference);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ReferenceKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param referenceKind the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ReferenceKind referenceKind) {
		return beginVisit((EmfaticTokenNode)referenceKind);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ReferenceKind</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param referenceKind the node currently being visited
	 */
	public void endVisit(ReferenceKind referenceKind) {
		endVisit((EmfaticTokenNode)referenceKind);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Modifiers</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modifiers the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Modifiers modifiers) {
		return beginVisit((EmfaticASTNode)modifiers);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Modifiers</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modifiers the node currently being visited
	 */
	public void endVisit(Modifiers modifiers) {
		endVisit((EmfaticASTNode)modifiers);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>OptNegatedModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param optNegatedModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(OptNegatedModifier optNegatedModifier) {
		return beginVisit((EmfaticASTNode)optNegatedModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>OptNegatedModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param optNegatedModifier the node currently being visited
	 */
	public void endVisit(OptNegatedModifier optNegatedModifier) {
		endVisit((EmfaticASTNode)optNegatedModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Modifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Modifier modifier) {
		return beginVisit((EmfaticTokenNode)modifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Modifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param modifier the node currently being visited
	 */
	public void endVisit(Modifier modifier) {
		endVisit((EmfaticTokenNode)modifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>DefaultValueExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param defaultValueExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(DefaultValueExpr defaultValueExpr) {
		return beginVisit((EmfaticASTNode)defaultValueExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>DefaultValueExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param defaultValueExpr the node currently being visited
	 */
	public void endVisit(DefaultValueExpr defaultValueExpr) {
		endVisit((EmfaticASTNode)defaultValueExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>BoolExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param boolExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(BoolExpr boolExpr) {
		return beginVisit((DefaultValueExpr)boolExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>BoolExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param boolExpr the node currently being visited
	 */
	public void endVisit(BoolExpr boolExpr) {
		endVisit((DefaultValueExpr)boolExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TrueOrFalse</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param trueOrFalse the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TrueOrFalse trueOrFalse) {
		return beginVisit((EmfaticTokenNode)trueOrFalse);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TrueOrFalse</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param trueOrFalse the node currently being visited
	 */
	public void endVisit(TrueOrFalse trueOrFalse) {
		endVisit((EmfaticTokenNode)trueOrFalse);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>IntExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param intExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(IntExpr intExpr) {
		return beginVisit((DefaultValueExpr)intExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>IntExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param intExpr the node currently being visited
	 */
	public void endVisit(IntExpr intExpr) {
		endVisit((DefaultValueExpr)intExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>StringExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(StringExpr stringExpr) {
		return beginVisit((DefaultValueExpr)stringExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>StringExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param stringExpr the node currently being visited
	 */
	public void endVisit(StringExpr stringExpr) {
		endVisit((DefaultValueExpr)stringExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>CharExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param charExpr the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(CharExpr charExpr) {
		return beginVisit((DefaultValueExpr)charExpr);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>CharExpr</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param charExpr the node currently being visited
	 */
	public void endVisit(CharExpr charExpr) {
		endVisit((DefaultValueExpr)charExpr);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Operation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operation the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Operation operation) {
		return beginVisit((ClassMemberDecl)operation);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Operation</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param operation the node currently being visited
	 */
	public void endVisit(Operation operation) {
		endVisit((ClassMemberDecl)operation);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>ResultType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param resultType the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(ResultType resultType) {
		return beginVisit((EmfaticASTNode)resultType);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>ResultType</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param resultType the node currently being visited
	 */
	public void endVisit(ResultType resultType) {
		endVisit((EmfaticASTNode)resultType);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>VoidContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param voidContainer the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(VoidContainer voidContainer) {
		return beginVisit((ResultType)voidContainer);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>VoidContainer</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param voidContainer the node currently being visited
	 */
	public void endVisit(VoidContainer voidContainer) {
		endVisit((ResultType)voidContainer);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Params</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param params the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Params params) {
		return beginVisit((EmfaticASTNode)params);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Params</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param params the node currently being visited
	 */
	public void endVisit(Params params) {
		endVisit((EmfaticASTNode)params);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>Param</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param param the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(Param param) {
		return beginVisit((EmfaticASTNode)param);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>Param</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param param the node currently being visited
	 */
	public void endVisit(Param param) {
		endVisit((EmfaticASTNode)param);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>DataTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param dataTypeDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(DataTypeDecl dataTypeDecl) {
		return beginVisit((TopLevelDecl)dataTypeDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>DataTypeDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param dataTypeDecl the node currently being visited
	 */
	public void endVisit(DataTypeDecl dataTypeDecl) {
		endVisit((TopLevelDecl)dataTypeDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>TransientModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param transientModifier the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(TransientModifier transientModifier) {
		return beginVisit((EmfaticASTNode)transientModifier);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>TransientModifier</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param transientModifier the node currently being visited
	 */
	public void endVisit(TransientModifier transientModifier) {
		endVisit((EmfaticASTNode)transientModifier);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumDecl enumDecl) {
		return beginVisit((TopLevelDecl)enumDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumDecl the node currently being visited
	 */
	public void endVisit(EnumDecl enumDecl) {
		endVisit((TopLevelDecl)enumDecl);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiterals</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiterals the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumLiterals enumLiterals) {
		return beginVisit((EmfaticASTNode)enumLiterals);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiterals</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiterals the node currently being visited
	 */
	public void endVisit(EnumLiterals enumLiterals) {
		endVisit((EmfaticASTNode)enumLiterals);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiteral the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(EnumLiteral enumLiteral) {
		return beginVisit((EmfaticASTNode)enumLiteral);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>EnumLiteral</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param enumLiteral the node currently being visited
	 */
	public void endVisit(EnumLiteral enumLiteral) {
		endVisit((EmfaticASTNode)enumLiteral);
	}
	/**
	 * This is called, for each node being visited, just after <code>preVisit</code> and
	 * before (optionally) visiting the children of the node.
	 * This <code>beginVisit</code> method is the specific one called for nodes
	 * of type <code>MapEntryDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param mapEntryDecl the node currently being visited
	 * @return true to visit the children of the node, false to prevent visiting the children of the node
	 */
	public boolean beginVisit(MapEntryDecl mapEntryDecl) {
		return beginVisit((TopLevelDecl)mapEntryDecl);
	}

	/**
	 * This is called, for each node being visited, after <code>beginVisit</code> and
	 * (optionally) visiting the children of the node and before <code>postVisit</code>.
	 * This <code>endVisit</code> method is the specific one called for nodes
	 * of type <code>MapEntryDecl</code>
	 * This may be overridden to provide special behavior at that point in processing.
	 * 
	 * @param mapEntryDecl the node currently being visited
	 */
	public void endVisit(MapEntryDecl mapEntryDecl) {
		endVisit((TopLevelDecl)mapEntryDecl);
	}


}
package org.eclipse.emf.emfatic.core.lang.gen.ast;

import org.eclipse.gymnast.runtime.core.ast.ASTNode;
import org.eclipse.gymnast.runtime.core.ast.TokenInfo;

/**
 *
 * @generated by Gymnast from Emfatic.ast on 06.02.2007 17:57:34
 */
public class ClassDecl extends TopLevelDecl  {

	public static final String KW_EXTENDS = "extends";

	private Annotations _annotations;
	private AbstractModifier _abstractModifier;
	private ClassKind _classKind;
	private EmfaticTokenNode _name;
	private TypeParamsInfo _typeParamsInfo;
	private EmfaticTokenNode _extends_KW;
	private CommaListBoundExceptWild _superTypes;
	private EmfaticTokenNode _colon;
	private BoundExceptWildcard _instClassName;
	private EmfaticTokenNode _lcurly;
	private ClassMemberDecls _classMemberDecls;
	private EmfaticTokenNode _rcurly;

	public Annotations getAnnotations() {
		return _annotations;
	}
	public AbstractModifier getAbstractModifier() {
		return _abstractModifier;
	}
	public ClassKind getClassKind() {
		return _classKind;
	}
	public EmfaticTokenNode getName() {
		return _name;
	}
	public TypeParamsInfo getTypeParamsInfo() {
		return _typeParamsInfo;
	}
	public EmfaticTokenNode getExtends_KW() {
		return _extends_KW;
	}
	public CommaListBoundExceptWild getSuperTypes() {
		return _superTypes;
	}
	public EmfaticTokenNode getColon() {
		return _colon;
	}
	public BoundExceptWildcard getInstClassName() {
		return _instClassName;
	}
	public EmfaticTokenNode getLcurly() {
		return _lcurly;
	}
	public ClassMemberDecls getClassMemberDecls() {
		return _classMemberDecls;
	}
	public EmfaticTokenNode getRcurly() {
		return _rcurly;
	}


	/**
	 * @return the number of children of this ASTNode
	 */
	public int getChildCount() {
		int count = 0;
		if (_annotations != null) count++;
		if (_abstractModifier != null) count++;
		if (_classKind != null) count++;
		if (_name != null) count++;
		if (_typeParamsInfo != null) count++;
		if (_extends_KW != null) count++;
		if (_superTypes != null) count++;
		if (_colon != null) count++;
		if (_instClassName != null) count++;
		if (_lcurly != null) count++;
		if (_classMemberDecls != null) count++;
		if (_rcurly != null) count++;

		return count;
	}

	/**
	 * @param index the index of a child ASTNode to get
	 * @return the child ASTNode at the given index
	 * @throws IndexOutOfBoundsException when the index is out of bounds
	 */
	public ASTNode getChild(int index) {
		int count = -1;
		if ((_annotations != null) && (++count == index)) return _annotations;
		if ((_abstractModifier != null) && (++count == index)) return _abstractModifier;
		if ((_classKind != null) && (++count == index)) return _classKind;
		if ((_name != null) && (++count == index)) return _name;
		if ((_typeParamsInfo != null) && (++count == index)) return _typeParamsInfo;
		if ((_extends_KW != null) && (++count == index)) return _extends_KW;
		if ((_superTypes != null) && (++count == index)) return _superTypes;
		if ((_colon != null) && (++count == index)) return _colon;
		if ((_instClassName != null) && (++count == index)) return _instClassName;
		if ((_lcurly != null) && (++count == index)) return _lcurly;
		if ((_classMemberDecls != null) && (++count == index)) return _classMemberDecls;
		if ((_rcurly != null) && (++count == index)) return _rcurly;

		throw new IndexOutOfBoundsException();
	}
	
	/**
	 * Construct a new ClassDecl.
	 */
	public ClassDecl(
		Annotations annotations,
		AbstractModifier abstractModifier,
		ClassKind classKind,
		TokenInfo name,
		TypeParamsInfo typeParamsInfo,
		TokenInfo extends_KW,
		CommaListBoundExceptWild superTypes,
		TokenInfo colon,
		BoundExceptWildcard instClassName,
		TokenInfo lcurly,
		ClassMemberDecls classMemberDecls,
		TokenInfo rcurly
	) {
		super();

		if (annotations != null) {
			_annotations = annotations;
			if (_annotations._parent != null) throw new RuntimeException();
			_annotations._parent = this;
		}
		if (abstractModifier != null) {
			_abstractModifier = abstractModifier;
			if (_abstractModifier._parent != null) throw new RuntimeException();
			_abstractModifier._parent = this;
		}
		if (classKind != null) {
			_classKind = classKind;
			if (_classKind._parent != null) throw new RuntimeException();
			_classKind._parent = this;
		}
		if (name != null) {
			_name = new EmfaticTokenNode(name);
			if (_name._parent != null) throw new RuntimeException();
			_name._parent = this;
		}
		if (typeParamsInfo != null) {
			_typeParamsInfo = typeParamsInfo;
			if (_typeParamsInfo._parent != null) throw new RuntimeException();
			_typeParamsInfo._parent = this;
		}
		if (extends_KW != null) {
			_extends_KW = new EmfaticTokenNode(extends_KW);
			if (_extends_KW._parent != null) throw new RuntimeException();
			_extends_KW._parent = this;
		}
		if (superTypes != null) {
			_superTypes = superTypes;
			if (_superTypes._parent != null) throw new RuntimeException();
			_superTypes._parent = this;
		}
		if (colon != null) {
			_colon = new EmfaticTokenNode(colon);
			if (_colon._parent != null) throw new RuntimeException();
			_colon._parent = this;
		}
		if (instClassName != null) {
			_instClassName = instClassName;
			if (_instClassName._parent != null) throw new RuntimeException();
			_instClassName._parent = this;
		}
		if (lcurly != null) {
			_lcurly = new EmfaticTokenNode(lcurly);
			if (_lcurly._parent != null) throw new RuntimeException();
			_lcurly._parent = this;
		}
		if (classMemberDecls != null) {
			_classMemberDecls = classMemberDecls;
			if (_classMemberDecls._parent != null) throw new RuntimeException();
			_classMemberDecls._parent = this;
		}
		if (rcurly != null) {
			_rcurly = new EmfaticTokenNode(rcurly);
			if (_rcurly._parent != null) throw new RuntimeException();
			_rcurly._parent = this;
		}

	}

	/**
	 * This method overrides the superclass <code>acceptImpl</code> providing
	 * the same implementation.  Here <code>this</code> refers to this specific node
	 * class, so the <code>beginVisit</code> and <code>endVisit</code> methods
	 * specific to this type in the visitor will be invoked.
	 */
	public void acceptImpl(EmfaticASTNodeVisitor visitor) {
		boolean visitChildren = visitor.beginVisit(this);
		if (visitChildren) visitChildren(visitor);
		visitor.endVisit(this);
	}

}
